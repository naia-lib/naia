use std::{default::Default, time::Duration};

use crate::{channel_config::DefaultChannels, ChannelIndex};
use naia_socket_shared::SocketConfig;

use super::{
    channel_config::ChannelConfig, compression_config::CompressionConfig, manifest::Manifest,
    ping_config::PingConfig, protocolize::Protocolize,
};

/// Contains Config properties which will be shared by Server and Client
#[derive(Clone)]
pub struct SharedConfig<P: Protocolize, C: ChannelIndex> {
    /// The Manifest generated by the Protocol which handles Replication
    pub manifest: Manifest<P>,
    /// Used to configure the underlying socket
    pub socket: SocketConfig,
    /// Config for Message channels
    pub channel: ChannelConfig<C>,
    /// The duration between each tick
    pub tick_interval: Option<Duration>,
    /// Configuration used to monitor the ping & jitter on the network
    pub ping: PingConfig,
    /// Configuration used to control compression parameters
    pub compression: Option<CompressionConfig>,
}

impl<P: Protocolize, C: ChannelIndex> SharedConfig<P, C> {
    /// Creates a new SharedConfig
    pub fn new(
        manifest: Manifest<P>,
        socket: SocketConfig,
        channel: ChannelConfig<C>,
        tick_interval: Option<Duration>,
        ping: PingConfig,
        compression: Option<CompressionConfig>,
    ) -> Self {
        Self {
            manifest,
            socket,
            channel,
            tick_interval,
            ping,
            compression,
        }
    }
}

impl<P: Protocolize> SharedConfig<P, DefaultChannels> {
    /// Creates a new with Default parameters
    pub fn default(manifest: Manifest<P>) -> Self {
        Self {
            manifest,
            socket: SocketConfig::default(),
            channel: ChannelConfig::<DefaultChannels>::default(),
            tick_interval: Some(Duration::from_millis(50)),
            ping: PingConfig::default(),
            compression: None,
        }
    }
}
