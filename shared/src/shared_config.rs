use std::{time::Duration, default::Default};

use naia_socket_shared::{LinkConditionerConfig, SocketConfig};

use super::{manifest::Manifest, ping_config::PingConfig, protocolize::Protocolize, compression_config::CompressionConfig};

/// Contains Config properties which will be shared by Server and Client
#[derive(Clone)]
pub struct SharedConfig<P: Protocolize> {
    /// The Manifest generated by the Protocol which handles Replication
    pub manifest: Manifest<P>,
    /// Used to configure the underlying socket
    pub socket: SocketConfig,
    /// The duration between each tick
    pub tick_interval: Option<Duration>,
    /// Configuration used to monitor the ping & jitter on the network
    pub ping: Option<PingConfig>,
    /// Configuration used to control compression parameters
    pub compression: Option<CompressionConfig>
}

impl<P: Protocolize> SharedConfig<P> {
    /// Creates a new SharedConfig
    pub fn new(
        manifest: Manifest<P>,
        socket: SocketConfig,
        tick_interval: Option<Duration>,
        ping: Option<PingConfig>,
        compression: Option<CompressionConfig>,
    ) -> Self {
        Self {
            manifest,
            socket,
            tick_interval,
            ping,
            compression,
        }
    }

    /// Creates a new with Default parameters
    pub fn default(
        manifest: Manifest<P>,
    ) -> Self {
        Self {
            manifest,
            socket: SocketConfig::default(),
            tick_interval: Some(Duration::from_millis(50)),
            ping: Some(PingConfig::default()),
            compression: None,
        }
    }
}